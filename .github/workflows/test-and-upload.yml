# Workflow Name
name: Test Keys and Upload Consolidated

on:
  schedule:
    # မိနစ် ၃၀ တိုင်း run ရန် (UTC time)
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  test-and-upload:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PUSH_TOKEN }}
          persist-credentials: false

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Installing 'requests'."
            pip install requests

      # 4. Run the Python key tester
      - name: Run Key Tester Script
        env:
          SOURCE_URLS_SECRET: ${{ secrets.SOURCE_URLS_SECRET }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python test_and_upload.py

      # 5. Commit and push generated file
      - name: Commit and Push Consolidated File
        run: |
          SUB_DIR="subscription"
          OUTPUT_FILE="working_keys.txt"
          OUTPUT_PATH="${SUB_DIR}/${OUTPUT_FILE}"

          if [ ! -f "${OUTPUT_PATH}" ]; then
            echo "No output file found. Skipping commit."
            exit 0
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add "${OUTPUT_PATH}"
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update consolidated working keys [skip ci]"
            git remote set-url origin https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}
            git push --force origin HEAD:${{ github.ref_name }}
          fi

      # 6. Install rclone
      - name: Install rclone
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y rclone

      # 7. Upload to Cloudflare R2 using API token and flags
      - name: Upload to Cloudflare R2 (Bucket:bot)
        run: |
          LOCAL_FILE="./subscription/working_keys.txt"
          if [ -f "${LOCAL_FILE}" ]; then
            echo "Uploading ${LOCAL_FILE} to R2 bucket 'bot'..."
            rclone copyto "${LOCAL_FILE}" \
              :s3:bot/working_keys.txt \
              --s3-provider Cloudflare \
              --s3-endpoint https://05b6101a6be3c69abad39bf39e6561bf.r2.cloudflarestorage.com \
              --s3-access-key-id 306cfaa08588ee59440f8ee730390c4b \
              --s3-secret-access-key b79d4b87aaa2e65565183c8e48e2169045b33c39064eb792beaa431a9ddd97e8 \
              --s3-acl public-read \
              --progress --verbose
            echo "Upload completed."
          else
            echo "No local file to upload."
          fi
