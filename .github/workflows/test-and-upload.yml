# Workflow Name
name: Fetch and Upload Hysteria Keys

on:
  schedule:
    # Run every 30 minutes (UTC time)
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allows manual triggering from Actions tab

jobs:
  fetch-and-upload:
    runs-on: ubuntu-latest # Use Linux runner
    timeout-minutes: 10 # Adjusted timeout

    steps:
      # 1. Checkout repository code using PUSH_TOKEN for push access
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PUSH_TOKEN }} # Use PAT for push access later
          persist-credentials: false # Avoid caching token

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify Python version
          cache: 'pip' # Cache pip dependencies for faster installs

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          echo "Installed required Python packages (requests)."

      # 4. Run the Python Script
      - name: Run Key Fetcher Script
        id: run-fetcher
        run: python test_and_upload.py # Ensure this filename matches your script

      # 5. Commit and Push Hysteria Files
      - name: Commit and Push Hysteria Files
        env:
          GIT_PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }} # Pass token explicitly
        run: |
          SUB_DIR="subscription"
          HYSTERIA_OUTPUT_FILE="hysteria.txt"
          HYSTERIA2_OUTPUT_FILE="hysteria2.txt"
          HYSTERIA_OUTPUT_PATH="${SUB_DIR}/${HYSTERIA_OUTPUT_FILE}"
          HYSTERIA2_OUTPUT_PATH="${SUB_DIR}/${HYSTERIA2_OUTPUT_FILE}"

          echo "Configuring Git user..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add ${HYSTERIA_OUTPUT_PATH} ${HYSTERIA2_OUTPUT_PATH}

          echo "Checking for staged changes..."
          if git diff --staged --quiet; then
            echo "No changes detected in output files to commit."
          else
            echo "Changes detected. Committing..."
            COMMIT_MESSAGE="Update hysteria/hysteria2 keys [skip ci]"
            COMMIT_MESSAGE="${COMMIT_MESSAGE} (Workflow Run: ${{ github.run_id }})"
            git commit -m "${COMMIT_MESSAGE}"

            echo "Setting remote URL with token for push..."
            git remote set-url origin https://x-access-token:${GIT_PUSH_TOKEN}@github.com/${{ github.repository }}

            echo "Pushing changes to branch '${{ github.ref_name }}'..."
            git push origin HEAD:${{ github.ref_name }}
          fi

      # 6. Install rclone for R2 Upload
      - name: Install rclone
        run: |
          echo "Installing rclone..."
          sudo apt-get update -qq
          sudo apt-get install -y rclone
          echo "rclone installed successfully."
          rclone version # Verify installation

      # 7. Configure rclone for Cloudflare R2 using Secrets
      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }} # Use account-scoped endpoint secret value
          R2_BUCKET_NAME_DEBUG: ${{ secrets.R2_BUCKET_NAME }} # For debug log only
        run: |
          # Essential check for secrets presence
          echo "--- Verifying R2 Env Vars ---"
          if [ -z "$R2_ACCESS_KEY_ID" ]; then echo "Error: R2_ACCESS_KEY_ID secret is missing or empty." >&2; exit 1; fi
          if [ -z "$R2_SECRET_ACCESS_KEY" ]; then echo "Error: R2_SECRET_ACCESS_KEY secret is missing or empty." >&2; exit 1; fi
          if [ -z "$R2_ENDPOINT" ]; then echo "Error: R2_ENDPOINT secret is missing or empty." >&2; exit 1; fi
          echo "R2_ACCESS_KEY_ID: Set (Length: ${#R2_ACCESS_KEY_ID})"
          echo "R2_ENDPOINT: $R2_ENDPOINT"
          echo "R2_BUCKET_NAME_DEBUG: $R2_BUCKET_NAME_DEBUG" # Debugging only
          echo "--- End R2 Env Var Check ---"

          echo "Creating rclone config for R2 remote named 'R2Storage'..."
          # Configure rclone using environment variables - creates temporary config in memory for this run
          rclone config create R2Storage s3 \
