# Workflow Name
name: Fetch, Commit, and Upload Hysteria Keys to R2

on:
  schedule:
    # Run every 30 minutes (UTC time)
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allows manual triggering from Actions tab

jobs:
  fetch-commit-upload: # Job name changed slightly for clarity
    runs-on: ubuntu-latest # Use Linux runner
    timeout-minutes: 10 # Timeout for the entire job

    steps:
      # 1. Checkout repository code using PUSH_TOKEN for push access
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PUSH_TOKEN }} # Use PAT for push access later
          persist-credentials: false # Avoid caching token

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify Python version
          cache: 'pip' # Cache pip dependencies for faster installs

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          echo "Installed required Python packages (requests)."

      # 4. Run the Python Script to fetch keys
      - name: Run Key Fetcher Script
        id: run-fetcher
        run: python test_and_upload.py # Make sure this filename matches your script in the repo

      # 5. Commit and Push Hysteria Files to Git Repo
      - name: Commit and Push Hysteria Files
        env:
          GIT_PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }} # Pass token explicitly
        run: |
          SUB_DIR="subscription"
          HYSTERIA_OUTPUT_FILE="hysteria.txt"
          HYSTERIA2_OUTPUT_FILE="hysteria2.txt"
          HYSTERIA_OUTPUT_PATH="${SUB_DIR}/${HYSTERIA_OUTPUT_FILE}"
          HYSTERIA2_OUTPUT_PATH="${SUB_DIR}/${HYSTERIA2_OUTPUT_FILE}"

          echo "Configuring Git user..."
          # Use a generic bot name or your preferred bot identity
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Add both files; git will only stage if they exist or changed
          git add ${HYSTERIA_OUTPUT_PATH} ${HYSTERIA2_OUTPUT_PATH}

          echo "Checking for staged changes in Hysteria files..."
          # Check if there are staged changes to commit
          if git diff --staged --quiet; then
            echo "No changes detected in output files (${HYSTERIA_OUTPUT_FILE}, ${HYSTERIA2_OUTPUT_FILE}) to commit."
          else
            echo "Changes detected. Committing..."
            COMMIT_MESSAGE="Update hysteria/hysteria2 keys [skip ci]"
            # Add workflow run ID for traceability
            COMMIT_MESSAGE="${COMMIT_MESSAGE} (Workflow Run: ${{ github.run_id }})"
            git commit -m "${COMMIT_MESSAGE}"

            echo "Setting remote URL with token for push..."
            # Use the GITHUB_TOKEN or the provided PUSH_TOKEN for authentication
            git remote set-url origin https://x-access-token:${GIT_PUSH_TOKEN}@github.com/${{ github.repository }}

            echo "Pushing changes to branch '${{ github.ref_name }}'..."
            # Push the commit to the same branch the workflow is running on
            git push origin HEAD:${{ github.ref_name }}
          fi

      # 6. Install rclone for R2 Upload
      - name: Install rclone
        run: |
          echo "Installing rclone..."
          # Use -qq for quieter output during update/install
          sudo apt-get update -qq
          sudo apt-get install -y rclone
          echo "rclone installed successfully."
          rclone version # Verify installation

      # 7. Configure rclone for Cloudflare R2 using Secrets
      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }} # Use account-scoped endpoint secret value
        run: |
          # Essential check for secrets presence (Optional but recommended)
          echo "--- Verifying R2 Env Vars ---"
          if [ -z "$R2_ACCESS_KEY_ID" ]; then echo "Error: R2_ACCESS_KEY_ID secret is missing or empty." >&2; exit 1; fi
          if [ -z "$R2_SECRET_ACCESS_KEY" ]; then echo "Error: R2_SECRET_ACCESS_KEY secret is missing or empty." >&2; exit 1; fi
          if [ -z "$R2_ENDPOINT" ]; then echo "Error: R2_ENDPOINT secret is missing or empty." >&2; exit 1; fi
          echo "R2 Env vars seem present."
          echo "--- End R2 Env Var Check ---"

          echo "Creating rclone config for R2 remote named 'R2Storage'..."
          # Configure rclone using environment variables - creates temporary config in memory
          # --- THIS IS THE CORRECTED COMMAND ---
          rclone config create R2Storage s3 \
            provider=Cloudflare \
            access_key_id="$R2_ACCESS_KEY_ID" \
            secret_access_key="$R2_SECRET_ACCESS_KEY" \
            endpoint="$R2_ENDPOINT" \
            acl=private
            # region=auto (Usually optional for R2)

          echo "rclone temporary config for 'R2Storage' created."

      # 8. Upload Files to Cloudflare R2
      - name: Upload Files to Cloudflare R2
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }} # Pass the bucket name secret
        run: |
          # Verify bucket name is set
          if [ -z "$R2_BUCKET_NAME" ]; then echo "Error: R2_BUCKET_NAME secret is missing or empty." >&2; exit 1; fi

          SOURCE_DIR="subscription" # Directory created by the Python script
          DEST_PATH="R2Storage:${R2_BUCKET_NAME}/" # Destination: remote:bucket_name/

          echo "Uploading contents of '${SOURCE_DIR}' to '${DEST_PATH}'..."

          # Use rclone copy to upload the directory contents
          # -v for verbose output to see which files are transferred
          rclone copy "${SOURCE_DIR}" "${DEST_PATH}" -v --checksum --no-update-modtime

          # Optional: Add error check - exits if rclone copy failed
          if [ $? -ne 0 ]; then
             echo "Error: rclone upload failed." >&2
             exit 1
          fi

          echo "Upload to R2 completed successfully."

