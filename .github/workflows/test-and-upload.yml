# Workflow Name
name: Test Keys and Upload Consolidated

on:
  schedule:
    # မိနစ် ၃၀ တိုင်း run ရန် (UTC time)
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  test-and-upload:
    runs-on: ubuntu-latest # Use Linux runner
    steps:
      # 1. Checkout repository code using PUSH_TOKEN
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PUSH_TOKEN }}
          persist-credentials: false

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install Python dependencies from requirements.txt
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Assuming 'requests' is needed."
            pip install requests
          fi

      # 4. Run the Python Key Tester Script
      - name: Run Key Tester Script
        env:
          # Pass the source URLs (multiline string) from secrets
          SOURCE_URLS_SECRET: ${{ secrets.SOURCE_URLS_SECRET }}
          # GitHub token for Xray download API calls
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Execute the python script
        run: python test_and_upload.py

      # 5. Commit and Push the SINGLE Subscription File using PUSH_TOKEN
      - name: Commit and Push Consolidated Subscription File
        run: |
          # Directory where python script outputs files
          SUB_DIR="subscription"
          # The single output file name from the python script
          OUTPUT_FILE="working_keys.txt"
          OUTPUT_FILE_PATH="${SUB_DIR}/${OUTPUT_FILE}"

          # Check if the output file exists
          if [ ! -f "${OUTPUT_FILE_PATH}" ]; then
            echo "Output file '${OUTPUT_FILE_PATH}' not found. Nothing to commit."
            # Decide if this is an error or expected (e.g., no working keys)
            # exit 1 # Exit with error if file MUST exist
            exit 0 # Exit successfully if file might be absent
          fi

          echo "Configuring Git user..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          echo "Adding file '${OUTPUT_FILE_PATH}'..."
          # Add only the single consolidated file
          git add ${OUTPUT_FILE_PATH}

          echo "Checking for staged changes..."
          if git diff --staged --quiet; then
            echo "No changes detected in '${OUTPUT_FILE_PATH}' to commit."
          else
            echo "Changes detected. Committing..."
            # Update commit message for single file
            git commit -m "Update consolidated working keys (${OUTPUT_FILE}) [skip ci]"

            echo "Setting remote URL with PUSH_TOKEN for push..."
            git remote set-url origin https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}

            echo "Pushing changes to branch ${{ github.ref_name }}..."
            git push origin HEAD:${{ github.ref_name }}
            echo "Push completed successfully."
          fi

      # 6. Install rclone for R2 Upload
      - name: Install rclone
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y rclone

      # 7. Configure rclone for Cloudflare R2 using Secrets
      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        run: |
          rclone config create R2 s3 \
            provider=Cloudflare \
            access_key_id=$R2_ACCESS_KEY_ID \
            secret_access_key=$R2_SECRET_ACCESS_KEY \
            endpoint=$R2_ENDPOINT \
            acl=public-read
          echo "rclone configured for R2."

      # 8. Upload the SINGLE working key file to R2 Bucket
      - name: Upload working key file to R2 Bucket
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # Local path to the single file
          LOCAL_FILE="./subscription/working_keys.txt"
          # Target path in R2 (same filename in the bucket root)
          R2_TARGET_FILE="R2:${R2_BUCKET_NAME}/working_keys.txt"

          if [ -f "${LOCAL_FILE}" ]; then
            echo "Output file '${LOCAL_FILE}' found. Uploading to R2: ${R2_TARGET_FILE}"
            # Use copyto for single file upload, ensures overwrite
            rclone copyto --checksum --progress --verbose "${LOCAL_FILE}" "${R2_TARGET_FILE}"
            echo "R2 Upload completed."
          else
            echo "Output file '${LOCAL_FILE}' not found. Skipping R2 upload."
            # Optional: Delete the file on R2 if it exists but wasn't generated locally?
            # rclone deletefile "${R2_TARGET_FILE}" || true
          fi

      # 9. Clean up local output file (Optional)
      # - name: Clean up local output file
      #   run: |
      #     rm -f ./subscription/working_keys.txt
